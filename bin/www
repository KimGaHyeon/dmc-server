#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('dmc-server:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '80');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * 20. 08. 25. 박찬형 - 무중단 배포
 * 무중단 배포 후 Old app이 요청 처리 중에 Kill 명령을 받는 경우를 대비해서
 * SIGINT -> SIGKILL 전송까지 딜레이를 걸어주고,
 * 코드 상에서는 SIGINT를 받으면 바로 종료할 수 있도록 함.
 */
process.on('SIGINT', async () => {
  await app.close();
  process.exit();
});

/**
 * Listen on provided port, on all network interfaces.
 */

console.log("Server start listening on port " + port)
server.listen(port, () => {
  /**
   * 20. 08. 25. 박찬형 - 무중단 배포
   * 무중단 배포 후 Reload 시 New app이 완전히 동작하기 전에 요청을 받는 경우를 대비해서
   * New app을 Load 하기 전에 ready 메시지를 기다리고,
   * ready 메시지를 받기 전에는 Old app에 요청을 보내도록 함.
   */
  console.log('Server start...');
  process.send('ready');  // 프로세스에 ready 메시지 전송
});
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
